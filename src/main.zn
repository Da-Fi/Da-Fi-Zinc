//!
//! The Curve Stableswap contract.
//!
//! Rewritten from [Vyper implementation](https://github.com/curvefi/curve-contract/blob/2b8ff42f5ce648be749c721d23c28ec8483df493/vyper/stableswap.vy)
//!
//! The [Curve Stableswap paper](https://www.curve.fi/stableswap-paper.pdf)
//!

mod types;
mod invariant;
mod constants;
mod exchange;

use self::constants::ZERO;
use self::constants::N;
use self::types::Address;
use self::types::Balance;
use self::types::token_id::TokenId;
use self::types::transaction::Transaction;

///
/// The Curve Stableswap contract.
///
contract Stableswap {
    /// The contract address.
    pub extern address: Address;

    /// The tokens being traded in the pool.
    pub tokens: [TokenId; N];

    /// The contract balances.
    pub balances: [Balance; N];

    /// The Curve amplifier.
    pub amplifier: u64;

    ///
    /// The contract constructor.
    ///
    pub fn new(
        _tokens: [TokenId; N],
        _amplifier: u64
    ) -> Self {
        require(_amplifier > 0, "The Curve amplifier cannot be zero");

        Self {
            address: 0x0 as Address,
            tokens: _tokens,
            balances: [ZERO; N],
            amplifier: _amplifier,
        }
    }

    ///
    /// Adds liquidity to the contract balances.
    ///
    pub fn deposit(
        mut self,
        tx: Transaction,
    ) {
        require(tx.recipient == self.address, "Transaction recipient is not the contract");

        let deposit_idx = self.token_position(tx.token_id);
            
        self.balances[deposit_idx] += tx.amount;
    }

    ///
    /// Exchanges the tokens, consuming some of the `tx.token_id` and returning some of the
    /// `withdraw_token_id` to the client.
    ///
    pub fn swap(
        mut self,
        tx: Transaction,
        withdraw_address: Address,
        withdraw_token_id: TokenId,
        min_withdraw: Balance,
    ) {
        require(tx.recipient == self.address, "Transaction recipient is not the contract");
        require(tx.amount > 0, "Sent amount cannot be zero");
        require(min_withdraw > 0, "Minimal withdrawal cannot be zero");

        let deposit_idx = self.token_position(tx.token_id);
        let withdraw_idx = self.token_position(withdraw_token_id);

        require(self.balances[deposit_idx] != 0, "Deposit token balance is zero");
        require(self.balances[withdraw_idx] != 0, "Withdraw token balance is zero");

        let old_y = self.balances[withdraw_idx];

        let new_x = self.balances[deposit_idx] + tx.amount;
        let new_y = exchange::after(
            self.tokens,
            self.balances,
            self.amplifier,

            deposit_idx,
            withdraw_idx,
            new_x
        );

        require(new_y > 0, "Withdrawing the entire pool is temporarily prohibited");

        require(old_y >= min_withdraw + new_y, "Exchange resulted in fewer coins than expected");
        let withdraw_amount = old_y - new_y;

        self.balances[deposit_idx] = new_x;
        self.balances[withdraw_idx] = new_y;

        zksync::transfer(withdraw_address, withdraw_token_id, withdraw_amount);
    }

    ///
    /// Given the amount to withdraw, returns the amount that must be deposited.
    ///
    pub fn get_dx(
        self,
        deposit_token_id: TokenId,
        withdraw_token_id: TokenId,
        to_withdraw: Balance,
    ) -> Balance {
        let deposit_idx = self.token_position(deposit_token_id);
        let withdraw_idx = self.token_position(withdraw_token_id);

        require(self.balances[deposit_idx] != 0, "Deposit token balance is zero");
        require(self.balances[withdraw_idx] != 0, "Withdraw token balance is zero");

        let after_withdrawal = self.balances[withdraw_idx] - to_withdraw;
        
        let after_deposit = exchange::after(
            self.tokens,
            self.balances,
            self.amplifier,

            withdraw_idx,
            deposit_idx,
            after_withdrawal,
        );

        after_deposit - self.balances[deposit_idx]
    }

    ///
    /// Given the amount to deposit, returns the amount that will be withdrawn.
    ///
    pub fn get_dy(
        self,
        deposit_token_id: TokenId,
        withdraw_token_id: TokenId,
        to_deposit: Balance,
    ) -> Balance {
        let deposit_idx = self.token_position(deposit_token_id);
        let withdraw_idx = self.token_position(withdraw_token_id);

        require(self.balances[deposit_idx] != 0, "Deposit token balance is zero");
        require(self.balances[withdraw_idx] != 0, "Withdraw token balance is zero");

        let after_deposit = self.balances[deposit_idx] + to_deposit;
        
        let after_withdrawal = exchange::after(
            self.tokens,
            self.balances,
            self.amplifier,

            deposit_idx,
            withdraw_idx,
            after_deposit,
        );

        self.balances[withdraw_idx] - after_withdrawal
    }

    /// 
    /// Given a token ID, returns the token position in the array of balances.
    /// 
    fn token_position(self, token_id: TokenId) -> u8 {
        let mut position = N;
        let mut found = false;

        for i in 0..N while !found {
            if self.tokens[i] == token_id {
                position = i;
                found = true;
            }
        }

        require(found, "Token ID is unknown");

        position
    }
}
